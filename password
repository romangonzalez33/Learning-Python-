{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMtEFPhDmyZprqfLbAmafBC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/romangonzalez33/Learning-Python-/blob/main/password\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_LuasEQjqy2a"
      },
      "outputs": [],
      "source": [
        "print(\"safe password generator\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Q4FY8rhD4UiL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W0q2m66H9b0K",
        "outputId": "75501c90-4f97-473e-e85b-705a1e21da11"
      },
      "source": [
        "# Import the random module to generate random characters for the password\n",
        "import random\n",
        "# Import the string module to access predefined string constants like letters, digits, and punctuation\n",
        "import string\n",
        "\n",
        "# Define a function called is_secure that takes a password string as input\n",
        "def is_secure(password):\n",
        "    \"\"\"Checks if a password is secure based on specific criteria.\"\"\"\n",
        "    # Check if the password has at least 8 characters\n",
        "    if len(password) < 8:\n",
        "        return False\n",
        "\n",
        "    # Check if the password contains at least 2 numbers\n",
        "    # sum(c.isdigit() for c in password) counts the number of digit characters in the password\n",
        "    num_digits = sum(c.isdigit() for c in password)\n",
        "    if num_digits < 2:\n",
        "        return False\n",
        "\n",
        "    # Check if the password contains at least 1 symbol\n",
        "    # sum(c in string.punctuation for c in password) counts the number of punctuation characters in the password\n",
        "    num_symbols = sum(c in string.punctuation for c in password)\n",
        "    if num_symbols < 1:\n",
        "        return False\n",
        "\n",
        "    # If all criteria are met, the password is secure, so return True\n",
        "    return True\n",
        "\n",
        "# Get password input from the user using the input() function\n",
        "user_password = input(\"Please enter your password: \")\n",
        "\n",
        "# Check if the entered password is secure by calling the is_secure function\n",
        "if is_secure(user_password):\n",
        "    # If the password is secure, print a confirmation message\n",
        "    print(\"The entered password is secure.\")\n",
        "else:\n",
        "    # If the password is not secure, print a message indicating that\n",
        "    print(\"The entered password is not secure according to the criteria.\")\n",
        "    # Ask the user if they want a secure password generated\n",
        "    user_input = input(\"Do you want a secure password generated? (yes/no): \").lower()\n",
        "    if user_input == \"yes\":\n",
        "        # Define a function called generate_password to create a random password\n",
        "        def generate_password(length=12):\n",
        "            \"\"\"Generates a random password of a given length.\"\"\"\n",
        "            # Define the characters to use in the password by combining letters, digits, and punctuation\n",
        "            characters = string.ascii_letters + string.digits + string.punctuation\n",
        "            # Generate the password by randomly selecting characters from the defined set\n",
        "            password = ''.join(random.choice(characters) for i in range(length))\n",
        "            # Return the generated password\n",
        "            return password\n",
        "\n",
        "        # Generate a new password using the generate_password function\n",
        "        secure_password = generate_password()\n",
        "        # Keep generating a new password until it is secure according to the is_secure function\n",
        "        while not is_secure(secure_password):\n",
        "            secure_password = generate_password()\n",
        "        # Print the generated secure password\n",
        "        print(\"Here is a secure password:\", secure_password)\n",
        "    else:\n",
        "        # If the user does not want a secure password generated, print a message\n",
        "        print(\"Okay, you chose not to generate a secure password.\")"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please enter your password: gfgfgfgfgfgfgfgfgfgfc12211212\"\"\"\n",
            "The entered password is secure.\n"
          ]
        }
      ]
    }
  ]
}